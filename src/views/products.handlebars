<!DOCTYPE html>
<html lang="es">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Productos en Tiempo Real</title>
    <script src="/socket.io/socket.io.js"></script>


    <script>
        let currentPage = 1;
        const limit = 10;
        let selectedCategory = '';
        let sortBy = 'title';
        let sortOrder = 'asc';

        // Función para leer los parámetros de la URL
        function getUrlParams() {
            const urlParams = new URLSearchParams(window.location.search);
            currentPage = parseInt(urlParams.get('page')) || 1;
            selectedCategory = urlParams.get('category') || '';
            sortBy = urlParams.get('sortBy') || 'title';
            sortOrder = urlParams.get('sortOrder') || 'asc';
        }

        document.addEventListener('DOMContentLoaded', () => {
            const socket = io();
            const categorySelect = document.getElementById('categorySelect');
            const prevButton = document.getElementById('prevButton');
            const nextButton = document.getElementById('nextButton');
            const sortSelect = document.getElementById('sortSelect');
            const orderSelect = document.getElementById('orderSelect');

            // Leer los parámetros de la URL
            getUrlParams();

            // Establecer los valores de los selects basados en los parámetros
            categorySelect.value = selectedCategory;
            sortSelect.value = sortBy;
            orderSelect.value = sortOrder;

            // Cargar productos
            loadProducts();

            function loadProducts() {
                socket.emit('getProducts', { page: currentPage, limit, category: selectedCategory, sortBy, sortOrder });
            }

            socket.on('updateProducts', ({ products, hasPrevPage, hasNextPage }) => {
                const productList = document.getElementById('productList');
                productList.innerHTML = products.map(product =>
                    `<li class="list-group-item">
                    ${product.title || 'Sin nombre'} - ${product.price} 
                    <button onclick="addToCart('${product._id}')">Agregar al carrito</button>
                    <button onclick="showDetails('${product._id}')">Mostrar más</button>
                </li>`
                ).join('');

                prevButton.disabled = !hasPrevPage;
                nextButton.disabled = !hasNextPage;

                updateURL();
            });

            function updateURL() {
                const url = new URL(window.location);
                url.searchParams.set('page', currentPage);
                url.searchParams.set('category', selectedCategory);
                url.searchParams.set('sortBy', sortBy);
                url.searchParams.set('sortOrder', sortOrder);
                window.history.pushState({}, '', url);
            }

            categorySelect.addEventListener('change', () => {
                selectedCategory = categorySelect.value;
                currentPage = 1;
                loadProducts();
            });

            sortSelect.addEventListener('change', () => {
                sortBy = sortSelect.value;
                currentPage = 1;
                loadProducts();
            });

            orderSelect.addEventListener('change', () => {
                sortOrder = orderSelect.value;
                currentPage = 1;
                loadProducts();
            });

            document.getElementById('productForm').addEventListener('submit', (event) => {
                event.preventDefault();

                const title = event.target.title.value;
                const description = event.target.description.value;
                const price = parseFloat(event.target.price.value);  // Asegúrate de que sea un número
                const stock = parseInt(event.target.stock.value, 10);  // Asegúrate de que sea un número entero
                const category = event.target.category.value;

                // Verifica si los valores de price y stock son válidos
                if (isNaN(price) || isNaN(stock)) {
                    alert("Por favor ingresa valores válidos para precio y stock.");
                    return;
                }

                socket.emit('createProduct', { title, description, price, stock, category });

                // Escuchar el evento 'productCreated' y mostrar el mensaje
                socket.on('productCreated', (data) => {
                    if (data.success) {
                        alert(data.message);  // Muestra un mensaje de éxito
                    }
                });

                event.target.reset();
            });


            prevButton.addEventListener('click', () => {
                if (currentPage > 1) {
                    currentPage--;
                    loadProducts();
                }
            });

            nextButton.addEventListener('click', () => {
                currentPage++;
                loadProducts();
            });
        });

        function addToCart(productId) {
            fetch(`/api/carts/670457eadbee7b2e09aacd6f/product/${productId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ quantity: 1 })
            })
                .then(response => {
                    if (response.ok) {
                        return response.json();
                    } else {
                        throw new Error('Error al agregar el producto al carrito');
                    }
                })
                .then(data => {
                    alert('Producto agregado al carrito');
                    console.log('Carrito actualizado:', data);
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert(error.message);
                });
        }

        function showDetails(productId) {
            window.location.href = `/api/products/${productId}`;
        }
    </script>

</head>

<body>
    <div class="container mt-5">
        <h1 class="text-center">Productos en Tiempo Real</h1>

        {{#if isAdmin}}
        <h2 class="mt-4">¡Crea tus productos!</h2>
        <form id="productForm" class="mb-4">
            <div class="form-group">
                <input type="text" name="title" placeholder="Título" required class="form-control">
            </div>
            <div class="form-group">
                <textarea name="description" placeholder="Descripción" required class="form-control"></textarea>
            </div>
            <div class="form-group">
                <input type="number" name="price" placeholder="Precio" required class="form-control">
            </div>
            <div class="form-group">
                <input type="number" name="stock" placeholder="Stock" required min="0" class="form-control">
            </div>
            <div class="form-group">
                <input type="text" name="category" placeholder="Categoría" required class="form-control">
            </div>
            <button type="submit" class="btn btn-primary w-100">Agregar producto</button>
        </form>
        {{/if}}

        <div class="form-group">
            <label for="categorySelect">Filtrar por categoría:</label>
            <select id="categorySelect" class="form-control">
                <option value="">Todas</option>
                <option value="Tecnologia">Tecnología</option>
                <option value="Relojes">Relojes</option>
                <option value="Ropa">Ropa</option>
                <option value="Hogar">Hogar</option>
            </select>
        </div>

        <div class="form-group">
            <label for="sortSelect">Ordenar por:</label>
            <select id="sortSelect" class="form-control">
                <option value="title">Nombre</option>
                <option value="price">Precio</option>
            </select>
        </div>

        <div class="form-group">
            <label for="orderSelect">Orden:</label>
            <select id="orderSelect" class="form-control">
                <option value="asc">Ascendente: A - Z // Precio menor</option>
                <option value="desc">Descendente: Z - A // Precio mayor</option>
            </select>
        </div>

        <ul id="productList" class="list-group mt-4"></ul>

        <div class="d-flex justify-content-between mt-4">
            <button id="prevButton" class="btn btn-secondary" disabled>Página Anterior</button>
            <button id="nextButton" class="btn btn-secondary" disabled>Página Siguiente</button>
        </div>
    </div>
</body>

</html>