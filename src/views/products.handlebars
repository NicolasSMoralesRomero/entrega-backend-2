<!DOCTYPE html>
<html lang="es">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Productos</title>
    <script src="/socket.io/socket.io.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <script>
        let currentPage = 1;
        const limit = 9; // Mostramos 9 productos por página
        let selectedCategory = '';
        let sortBy = 'title';
        let sortOrder = 'asc';

        function getUrlParams() {
            const urlParams = new URLSearchParams(window.location.search);
            currentPage = parseInt(urlParams.get('page')) || 1;
            selectedCategory = urlParams.get('category') || '';
            sortBy = urlParams.get('sortBy') || 'title';
            sortOrder = urlParams.get('sortOrder') || 'asc';
        }

        document.addEventListener('DOMContentLoaded', () => {
            const socket = io();
            const categorySelect = document.getElementById('categorySelect');
            const prevButton = document.getElementById('prevButton');
            const nextButton = document.getElementById('nextButton');
            const sortSelect = document.getElementById('sortSelect');
            const orderSelect = document.getElementById('orderSelect');
            const productList = document.getElementById('productList');
            const productForm = document.getElementById('productForm');

            function updateURL() {
                const url = new URL(window.location);
                url.searchParams.set('page', currentPage);
                url.searchParams.set('category', selectedCategory);
                url.searchParams.set('sortBy', sortBy);
                url.searchParams.set('sortOrder', sortOrder);
                window.history.pushState({}, '', url);
            }

            function loadProducts() {
                socket.emit('getProducts', { page: currentPage, limit, category: selectedCategory, sortBy, sortOrder });
            }

            socket.on('updateProducts', ({ products, hasPrevPage, hasNextPage }) => {
                productList.innerHTML = products.map(product => `
                <div class="col-md-4">
                    <div class="card mb-4 shadow-sm">
                        <div class="card-body">
                            <h5 class="card-title">${product.title || 'Sin nombre'}</h5>
                            <p class="card-text">$${product.price}</p>
                            <div class="d-grid gap-2">
                                <button class="btn btn-info btn-sm" onclick="showDetails('${product._id}')">Detalles</button>
                                {{#unless isAdmin}}
                                    <button class="btn btn-success btn-sm" onclick="addToCart('${product._id}')">Agregar al carrito</button>
                                {{/unless}}
                            </div>
                        </div>
                    </div>
                </div>`).join('');

                prevButton.disabled = !hasPrevPage;
                nextButton.disabled = !hasNextPage;
                updateURL();
            });

            categorySelect.addEventListener('change', () => {
                selectedCategory = categorySelect.value;
                currentPage = 1;
                loadProducts();
            });

            sortSelect.addEventListener('change', () => {
                sortBy = sortSelect.value;
                currentPage = 1;
                loadProducts();
            });

            orderSelect.addEventListener('change', () => {
                sortOrder = orderSelect.value;
                currentPage = 1;
                loadProducts();
            });

            prevButton.addEventListener('click', () => {
                if (currentPage > 1) {
                    currentPage--;
                    loadProducts();
                }
            });

            nextButton.addEventListener('click', () => {
                currentPage++;
                loadProducts();
            });

            if (productForm) {
                productForm.addEventListener('submit', (event) => {
                    event.preventDefault();
                    const title = event.target.title.value;
                    const description = event.target.description.value;
                    const price = event.target.price.value;
                    const stock = event.target.stock.value;
                    const category = event.target.category.value;

                    socket.emit('createProduct', { title, description, price, stock, category });
                    event.target.reset();
                });
            }

            getUrlParams();
            loadProducts();
        });

        function addToCart(productId) {
            fetch(`/api/carts/670457eadbee7b2e09aacd6f/product/${productId}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ quantity: 1 })
            })
                .then(response => response.ok ? response.json() : Promise.reject('Error al agregar al carrito'))
                .then(data => {
                    alert('Producto agregado al carrito');
                })
                .catch(error => alert(error));
        }

        function showDetails(productId) {
            window.location.href = `/api/products/${productId}`;
        }
    </script>
</head>

<body>
    <div class="container mt-5">
        <h1 class="text-center mb-4">Productos</h1>

        {{#if isAdmin}}
        <div class="card p-4 mb-4">
            <h2 class="text-center">Crear Producto</h2>
            <form id="productForm">
                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3"><input type="text" name="title" placeholder="Título" required class="form-control"></div>
                        <div class="mb-3"><textarea name="description" placeholder="Descripción" required class="form-control"></textarea></div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3"><input type="number" name="price" placeholder="Precio" required class="form-control"></div>
                        <div class="mb-3"><input type="number" name="stock" placeholder="Stock" required min="0" class="form-control"></div>
                        <div class="mb-3"><input type="text" name="category" placeholder="Categoría" required class="form-control"></div>
                    </div>
                </div>
                <button type="submit" class="btn btn-primary w-100">Agregar Producto</button>
            </form>
        </div>
        {{/if}}

        <div class="row g-3 mb-4">
            <div class="col-md-4">
                <label for="categorySelect">Filtrar por Categoría:</label>
                <select id="categorySelect" class="form-select">
                    <option value="">Todas</option>
                    <option value="Tecnologia">Tecnología</option>
                    <option value="Relojes">Relojes</option>
                    <option value="Ropa">Ropa</option>
                    <option value="Hogar">Hogar</option>
                </select>
            </div>
            <div class="col-md-4">
                <label for="sortSelect">Ordenar por:</label>
                <select id="sortSelect" class="form-select">
                    <option value="title">Nombre</option>
                    <option value="price">Precio</option>
                </select>
            </div>
            <div class="col-md-4">
                <label for="orderSelect">Orden:</label>
                <select id="orderSelect" class="form-select">
                    <option value="asc">Ascendente</option>
                    <option value="desc">Descendente</option>
                </select>
            </div>
        </div>

        <div class="row" id="productList"></div>

        <div class="d-flex justify-content-between mt-4">
            <button id="prevButton" class="btn btn-outline-secondary" disabled>Página Anterior</button>
            <button id="nextButton" class="btn btn-outline-secondary" disabled>Página Siguiente</button>
        </div>
    </div>
</body>

</html>